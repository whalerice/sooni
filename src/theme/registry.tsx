'use client';

import React, { ReactNode, useEffect, useRef, useState } from 'react';
import {
  px2remTransformer,
  createCache,
  extractStyle,
  StyleProvider,
} from '@ant-design/cssinjs';
import { useServerInsertedHTML } from 'next/navigation';
import { ConfigProvider } from 'antd';
import { themeAntModes, themeConfig } from '@/theme/config';
import { CookieValueTypes, getCookie } from 'cookies-next';
import '@/styles/index.scss';
import ko from 'antd/locale/ko_KR';

const prefix: string = 'qt';
const cache = createCache();

const Registry = ({ children }: { children: ReactNode }) => {
  const themeMode: CookieValueTypes = getCookie('theme-mode');
  const inserted = useRef(false);
  const px2rem = px2remTransformer({
    rootValue: 10, // 10px = 1rem;
  });
  const [currentTheme, setCurrentTheme] = useState<string>('');

  useEffect(() => {
    setCurrentTheme(themeMode ? themeMode : 'light');
  }, [themeMode]);

  useServerInsertedHTML(() => {
    const styleText = extractStyle(cache, { plain: true });

    if (inserted.current) {
      return null;
    }
    inserted.current = true;

    return (
      <style
        id={`${prefix}-cssinjs`}
        // to make sure this style is inserted before Ant Design's style generated by client
        data-rc-order="prepend"
        data-rc-priority="-1000"
        dangerouslySetInnerHTML={{ __html: styleText }}
      />
    );
  });

  return (
    <StyleProvider transformers={[px2rem]} hashPriority="high" cache={cache}>
      <ConfigProvider
        theme={{ algorithm: themeAntModes[currentTheme], ...themeConfig }}
        prefixCls={prefix}
        iconPrefixCls={prefix}
        locale={ko}
      >
        {children}
      </ConfigProvider>
    </StyleProvider>
  );
};

export default Registry;
